[
  {
    "name": "Unity Ecs Lookup Generate",
    "content": "Generate ComponentLookup code for a Component name. For example, if the Component name is \"CMoveSpeed\", the code should be:\n\n1. Private define:\n```\nprivate ComponentLookup<CMoveSpeed> _lMoveSpeed;\n```\n\n2. Init:\n```\n_lMoveSpeed = GetComponentLookup<CMoveSpeed>(true);\n```\n\n3. Use in Update:\n```\n_lMoveSpeed.Update(this);\n```\n\n4. Pass to ISystem:\n```\nLMoveSpeed = _lMoveSpeed,\n```\n\n5. Public define:\n```\n[ReadOnly]\npublic ComponentLookup<CMoveSpeed> LMoveSpeed;\n```\n\n6. Usage:\n```\nif (EcsUtility.TryGetRefRO(LMoveSpeed, e, out var roMoveSpeed)) {\n    // do something\n}\n```\n\nMy Component name is \"{{component name}}\""
  },
  {
    "name": "Fix code",
    "content": "I need help fixing my code:\n\n```\n{{code}}\n```\n\n{{bugs info}}"
  },
  {
    "name": "Clean Optimize Improve Code",
    "content": "Help me improve, clean, and optimize the algorithm for my code:\n\n```\n{{code}}\n```"
  },
  {
    "name": "Write Comment Docs Code",
    "content": "Write documentation for this function. The document format will be automatically detected based on the language, for example JSDoc for Javascript, XML for C#, Sphinx for Python, //! or /// style for Rust, Doxygen for C/C++/Objective-C/PHP/Java,... and add comments to complex lines of code:\n\n```\n{{code}}\n```\n\nPlease ensure that the docs you create are within a Markdown code block, DO NOT WRITE EXPLANATIONS."
  },
  {
    "name": "Midjourney",
    "content": "You are going to pretend to be Concept2PromptAI or C2P_AI for short. C2P_AI takes concepts and turns them into prompts for generative AIs that create images. You will ask the user for a concept then provide a prompt for it. Do not add any opening phrases such as: \"Translated Text:\", \"Prompt:\", \"Translated Prompt:\",...\n\nUse the following examples as a guide:\n\nConcept: A macro shot of a stempunk insect\n\nPrompt: a close up of a bug with big eyes, by Andrei Kolkoutine, zbrush central contest winner, afrofuturism, highly detailed textured 8k, reptile face, cyber steampunk 8 k 3 d, c 4 d ‚Äù, high detail illustration, detailed 2d illustration, space insect android, with very highly detailed face, super detailed picture --v 5.2 --q 2 --stylize 1000 --seed 30002\n\nConcept: An orange pie on a wooden table\n\nPrompt: a pie sitting on top of a wooden table, by Carey Morris, pexels contest winner, orange details, linen, high details!, gif, leafs, a pair of ribbed, ü¶©ü™êüêûüë©üèªü¶≥, vivid attention to detail, navy, piping, warm sunshine, soft and intricate, lights on, crisp smooth lines, religious --v 5.2 --q 2 --stylize 1000 --seed 5002\n\nConcept: a close up shot of a plant with blue and golden leaves\n\nPrompt: a close up of a plant with golden leaves, by Hans Schwarz, pexels, process art, background image, monochromatic background, bromeliads, soft. high quality, abstract design. blue, flax, aluminium, walking down, solid colours material, background artwork --v 5.2 --q 2 --stylize 1000 --seed 1240\n\nOptions: --seed <random integer between 0‚Äì4294967295>\n\nMy concept is \"{{concept}}\""
  },
  {
    "name": "Convert Tailwind To Mui",
    "content": "Help me convert a tailwind CSS class to MUI sx attribute. My tailwind class is:\n\n```\n{{code}}\n```"
  },
  {
    "name": "Convert To Ts Axios",
    "content": "Convert this content to an Axios request in TypeScript, using arrow function syntax, define type in function, and return the request data or return `{data:null, errorMessage:..., statusCode:...}` if there is a request error:\n\n```\n{{code}}\n```\n\nThis is an example of an error message:\n```\n// error type: : AxiosError | any\nerrorMessage = error.response?.data?.message || 'An error occurred while fetching the data.';\n```"
  },
  {
    "name": "Typescript Ts Type",
    "content": "Help me define a TypeScript type (use type insted of interface) for data below:\n\n```\n{{code}}\n```"
  },
  {
    "name": "Write Python Function",
    "content": "Write a Python function for the following purpose: "
  },
  {
    "name": "Variable Name",
    "content": "What are some variable names for \"{{context}}\"?"
  },
  {
    "name": "Write Unit Test",
    "content": "Write a unit test for the following function:\n\n```\n{{code}}\n```"
  },
  {
    "name": "To Options Parameter",
    "content": "Change input parameters to an options object:\n\n```\n{{code}}\n```"
  },
  {
    "name": "Mkcert",
    "content": "Create a configuration for mkcert for the domain \"{{domain}}\" and all its subdomains, and also for localhost, localhost 127.0.0.1 ::1:\n\nFor example:\n```\nmkcert example.com \"*.example.com\" example.test localhost 127.0.0.1 ::1\n```"
  },
  {
    "name": "Docker Compose",
    "content": "Convert to Docker Compose with restart policy set to always, version: '3.6' and expose some port if you know:\n\n```\n{{code}}\n```"
  },
  {
    "name": "Sequelize Model Define",
    "content": "Define a Sequelize model in TypeScript:\n\nFor example:\n```\nimport { DataTypes, Model, UUIDV4 } from \"sequelize\";\nimport { sequelize } from \"../sequelize\";\n\ninterface VideoAttributes {\n  id: string;\n  created_at: Date;\n  updated_at: Date;\n  url: string;\n  video_id: string;\n  snippet: object;\n  user_id: string;\n  title: string;\n  channel_name?: string | null;\n  thumbnail?: string | null;\n}\n\nclass Video extends Model<VideoAttributes> implements VideoAttributes {\n  public id!: string;\n  public created_at!: Date;\n  public updated_at!: Date;\n  public url!: string;\n  public video_id!: string;\n  public snippet!: object;\n  public user_id!: string;\n  public title!: string;\n  public channel_name?: string | null;\n  public thumbnail?: string | null;\n}\n\nVideo.init(\n  {\n    id: {\n      type: DataTypes.UUID,\n      primaryKey: true,\n      defaultValue: UUIDV4,\n      unique: true,\n    },\n    created_at: {\n      type: DataTypes.DATE,\n      defaultValue: DataTypes.NOW,\n    },\n    updated_at: {\n      type: DataTypes.DATE,\n      defaultValue: DataTypes.NOW,\n    },\n    url: {\n      type: DataTypes.TEXT,\n      allowNull: false,\n    },\n    video_id: {\n      type: DataTypes.TEXT,\n      allowNull: false,\n    },\n    snippet: {\n      type: DataTypes.JSONB,\n      allowNull: false,\n    },\n    user_id: {\n      type: DataTypes.UUID,\n      allowNull: false,\n    },\n    title: {\n      type: DataTypes.TEXT,\n      allowNull: false,\n    },\n    channel_name: {\n      type: DataTypes.TEXT,\n      allowNull: true,\n    },\n    thumbnail: {\n      type: DataTypes.TEXT,\n      allowNull: true,\n    },\n  },\n  {\n    sequelize,\n    tableName: \"videos\",\n    underscored: true,\n  }\n);\n\nexport { Video };\n```\n\nMy data is:\n\n```\n{{code}}\n```\n\nMy table name is: "
  },
  {
    "name": "Update Modify Edit Upgrade Override Code",
    "content": "```\n{{code}}\n```\n\nWrite code based on the provided code to fulfill the requirement: "
  },
  {
    "name": "Cheatsheet",
    "content": "Write a cheatsheet for \"{{context}}\""
  },
  {
    "name": "Write Test Cases",
    "content": "Help me create a test case list for the \"{{feature}}\" feature."
  },
  {
    "name": "Convert Messagepack",
    "content": "help me convert to `MessagePack-CSharp`, all keys are indexes:\n\n```\n{{code}}\n```\n"
  },
  {
    "name": "Understand Clarify",
    "content": "help me understand about \"{{context}}\". Please use Vietnamese"
  },
  {
    "name": "Convert Probuf",
    "content": "help me convert to `probuf`:\n\n```\n{{code}}\n```\n"
  },
  {
    "name": "Generate Github Topics",
    "content": "Generate github topics (use snake_case, lowercase) for my content. PROVIDE AS MANY TOPICS AS POSSIBLE, SORTED BY SCORE:\n\nexample: rust:0.9, deep_learning:0.3, c_sharp:0.2, react_ui:0.1, toolkit:0.1, command_line:0.1,...\n\nmy content is:\n\n```\n{{code}}\n```"
  },
  {
    "name": "Translate To Vietnamese",
    "content": "translate to Vietnamese"
  },
  {
    "name": "Convert Svg To React Component",
    "content": "Convert SVG to a TypeScript React component with props (props: ComponentPropsWithRef<\"svg\">). My SVG code is:\n\n```\n{{code}}\n```"
  },
  {
    "name": "Communication",
    "content": "context:\n\n```\n{{code}}\n```\n\nI want to translate the following conversation into English:\n\n```\n{{code}}\n```"
  },
  {
    "name": "Write Email Reply",
    "content": "Help me write a reply for this email content:\n\n```\n{{code}}\n```"
  },
  {
    "name": "Calculate Complexity Algorithm",
    "content": "Calculate the complexity of the algorithm for the following function:\n\n```\n{{code}}\n```"
  },
  {
    "name": "Rewrite Function For Better Readability",
    "content": "Please rewrite the following function for better readability:\n\n```\n{{code}}\n```"
  },
  {
    "name": "Optimize Translate Make It More Polite",
    "content": "Fix the sentence above to be more polite"
  },
  {
    "name": "Convert To Typescript Ts",
    "content": "convert to typescript:\n\n```\n{{code}}\n```"
  },
  {
    "name": "Convert Tailwind To React Style",
    "content": "Help me convert a tailwind CSS class to React style attribute. My tailwind class is:\n\n```\n{{code}}\n```"
  },
  {
    "name": "Write Function From Function",
    "content": "From the given function:\n\n```\n{{code}}\n```\n\nWrite a function named `functionName` that performs the desired task."
  },
  {
    "name": "Split Code Reusability",
    "content": "Split the given code into smaller functions to optimize reusability:\n\n```\n{{code}}\n```"
  },
  {
    "name": "Translate Remove I Think",
    "content": "Replace \"I think\" with something more definite."
  },
  {
    "name": "Fix Edit Translated Text By Context",
    "content": "Help me fix the translated text above with the given context:\n\n\"\"\"\n{{context}}\n\"\"\""
  },
  {
    "name": "Clang Format",
    "content": "Help me modify a .clang-format file from a base file:\n\n```\n---\n# We'll use defaults from the LLVM style, but with 4 columns indentation.\nBasedOnStyle: Chromium\nSortIncludes: Never\nColumnLimit: 128\nIndentWidth: 2\nAllowShortFunctionsOnASingleLine: None\nPenaltyBreakComment: 0\n```\n\nto "
  },
  {
    "name": "Create Cmake Config",
    "content": "Create a CMakeLists.txt file for Windows users with CMAKE_CXX_STANDARD 17 project, version 3.23, named \"{{name}}\" and boost 1.78.0 in directory \"../lib/boost_1_78_0\" to include "
  },
  {
    "name": "Convert To Rust Lang",
    "content": "```\n{{code}}\n```\n\nHelp me write this function in Rust language."
  },
  {
    "name": "Convert Css To Tailwind",
    "content": "Help me convert CSS to tailwind class (for both dark & light):\n\n```\n{{code}}\n```"
  },
  {
    "name": "Complete Code",
    "content": "Complete the following code:\n\n```\n{{code}}\n```"
  },
  {
    "name": "Invester App Abi",
    "content": "from this template:\n\n```\nimport {\n  EthersContract,\n  getEthersContract,\n} from '@/dependencies/EthersContract';\nimport { rpcProviderService } from '@/services/rpc-provider/rpc-provider.service';\nimport UniqueIdentityABI from '@/lib/abi/UniqueIdentity.json';\nimport { configService } from '@/services/config/config.service';\nimport { walletService as walletServiceInstance } from '@/services/web3/wallet.service';\nimport { getAddress } from '@ethersproject/address';\nimport { parseEther } from '@ethersproject/units';\n\nexport class UniqueIdentity {\n  instance: EthersContract;\n\n  constructor(\n    public readonly address: string,\n    private readonly provider = rpcProviderService.jsonProvider,\n    private readonly abi = UniqueIdentityABI,\n    private readonly config = configService,\n    private readonly walletService = walletServiceInstance\n  ) {\n    const Contract = getEthersContract();\n    this.instance = new Contract(this.address, this.abi, this.provider);\n  }\n\n  async mint(\n    id: number,\n    expiresAt: number,\n    signature: string,\n    walletSigner: string\n  ) {\n    const signer = this.walletService.userProvider.value.getSigner();\n    const contractWithSigner = this.instance.connect(signer);\n    return await contractWithSigner.mint(id, expiresAt, signature, {\n      from: walletSigner,\n      value: parseEther('0.00083'),\n    });\n  }\n\n  async balanceOfBatch(accounts: string[], ids: number[] = [0]) {\n    return this.instance.balanceOfBatch(\n      accounts.map(v => getAddress(v)),\n      ids\n    );\n  }\n}\n```\n\nwrite a class for this smart contract ABI:\n\n```\n{{code}}\n```"
  },
  {
    "name": "Translate In Context",
    "content": "Translate in context:\n\n```\n{{code}}\n```\n\nContext: "
  },
  {
    "name": "Create Component Data",
    "content": "Create IComponentData from an existing class. Example:\n\n```csharp\npublic class EnemySpawnConfig {\n    public GameObject prefab;\n    public int maxSpawnTime;\n    public float spawnRate;\n    public int spawnCount;\n    public bool facingPlayer;\n    public bool grouping;\n    public GroupPattern groupPattern;\n    public float spacing = 1.5f;\n\n    [NonSerialized]\n    public float currentSpawnTime;\n    [NonSerialized]\n    public float currentSpawnCount;\n}\n```\n\nResult:\n\n- All gameObjects will be converted to Entities\n- Convert List, Array, Dictionary, etc. to Unity.Collections\n\n```csharp\npublic struct CEnemySpawnConfig : IComponentData {\n    public Entity Entity;\n    public int MaxSpawnTime;\n    public float SpawnRate;\n    public int SpawnCount;\n    public bool FacingPlayer;\n    public bool Grouping;\n    public GroupPattern GroupPattern;\n    public float Spacing;\n    public float CurrentSpawnTime;\n    public float CurrentSpawnCount;\n}\n\n\n...\nvar enemySpawnConfig = ...\nvar cEnemySpawnConfig = new CEnemySpawnConfig {\n    Entity = GetEntity(enemySpawnConfig.prefab, TransformUsageFlags.Dynamic),\n    MaxSpawnTime = enemySpawnConfig.MaxSpawnTime,\n    ... Help me generate code to initialize all members\n}\n```\n\nMy existing class is:\n\n```\n{{code}}\n```"
  },
  {
    "name": "Write Function",
    "content": "Write a script function following this flow:\n\n- Function parameters: \n- Function output: "
  },
  {
    "name": "Generate Gitignore",
    "content": "Generate a .gitignore file for \"{{language}}\" in IntelliJ."
  }
]
